{

	"attribute tab": {
		"prefix": "aattr",
		"body": [
		  "<aura:attribute name=\"${1:sobject}\" type=\"${2|String,Number,Date|}\" default=\"${3:defaultvalue}\"/>"
		],
		"description": "attribute tab"
	  },

	  "Lightning Button": {
		"prefix": "lbutton",
		"body": [
		  "<lightning:button variant=\"${1|base,Neutral,brand,destructive,success|}\" label=\"${2:label}\" title=\"${3:title}\" onclick=\"{!c.${4:sobject}}\"/>",
		  ""
		],
		"description": "Lightning Button"
	  },
	  "Lightning Text number": {
		"prefix": "ltextNum",
		"body": [
		  "<lightning:input type=\"number\" name=\"${1:name}\" label=\"${2:label}\" required=\"${3|true,false|}\" value=\"${3:value}\" />"
		],
		"description": "Lightning Text number"
	  },
	  
	
	"primitive data types": {
		"prefix": "d",
		"body": [
		  "${1|String,Integer,Date,Boolean,DateTime,Decimal|}"
		],
		"description": "primitive data types"
	  },
	  "custom object name": {
		"prefix": "dcobj",
		"body": [
		  "${1:variableName}__c"
		],
		"description": "custom object name"
	  },
	"variaiable declaration": {
		"prefix": "var",
		"body": [
		  "${1|String,Integer,Date,Boolean,DateTime,Decimal,ID|}   ${1:variableName} = ${3:defaultvalue};"
		],
		"description": "variaiable declaration"
	  },

	  "string variaiable declaration": {
		"prefix": "var_str",
		"body": [
		  "String  ${1:variableName} = \"${3:defaultvalue}\";",
		  ""
		],
		"description": "string variaiable declaration"
	  },

	  "variaiable declaration with getter setter": {
		"prefix": "var_getset",
		"body": [
		  "${1|String,Integer,Date,Boolean,DateTime,Decimal,ID|}   ${2:variableName} { get; set; }",
		  "",
		  ""
		],
		"description": "variaiable declaration with getter setter"
	  },
	  "list specific var with default init": {
		"prefix": "varlist_constructor",
		"body": [
		  "List<${1|String,Integer,Date,Boolean,DateTime,Decimal,ID|}> listVariable = new List<${1}>();",
		  ""
		],
		"description": "list var with default init"
	  },
	  "list string var with default value": {
		"prefix": "varlist_str_init",
		"body": [
		  "List<String> ${1:variableName} = new List<String>() { \"${2:value1}\",\"${3:value2}\" };"
		],
		"description": "list string var with default value"
	  },
	  "Object initialization": {
		"prefix": "varobj_init",
		"body": [
		  "${1:sObjectorClass}  ${2:variableName} = new ${1:sObjectorClass} () ;"
		],
		"description": "Object initialization"
	  },
	  "object list initialization": {
		"prefix": "varobj_list_init",
		"body": [
		  "List<${1:sObjectorClass}>  ${2:listVariableName} = new List<${1:sObjectorClass}> () ;",
		  ""
		],
		"description": "object list initialization"
	  },

"soql list": {
	"prefix": "soql",
	"body": [
	  "[SELECT ${1:fieldList} ",
	  " FROM ${2:objName} ",
	  " WHERE ${3:condition} ]",
	  "  "
	],
	"description": "soql list"
  },

  "soql one record": {
	"prefix": "soql_one_rec",
	"body": [
	  "${1:objName} = FROM ${2:variable}  = [SELECT ${3:fieldList} ",
	  "                                        FROM ${1:objName} ",
	  "                                        WHERE ${4:condition} ",
	  "                                        LIMIT 1];"
	],
	"description": "soql one record"
  },
  "Soql to fetch more records and assign to list": {
	"prefix": "soql_list",
	"body": [
	  "List<${1:objName}> ${2:variable}  =  [SELECT ${3:fieldList} ",
	  "                                      FROM ${1:objName} ",
	  "                                      WHERE ${4:condition} ];"
	],
	"description": "Soql to fetch more records and assign to list"
  },


	  "try catch with error message": {
		"prefix": "trycatch",
		"body": [
		  "try ",
		  "{",
		  "    ${1:statements} ",
		  "} catch(DmlException e) ",
		  "{",
		  "    System.debug('The following exception has occurred: ' + e.getMessage());",
		  "}"
		],
		"description": "try catch with error message"
	  },



	   "for loop for primitive data type": {
		"prefix": "for_primitive",
		"body": [
		  "for (${1:dataType} ${2:variable}): ${3:listVariable}) {",
		  "    $0",
		  "}"
		],
		"description": "for loop for primitive data type"
	  },

	  "for loop with inbuilt soql": {
		"prefix": "fsoql",
		"body": [
		  "for (${1:objName} ${2:variable}: [SELECT ${3:fieldList} ",
		  "                                  FROM ${1:objName} ",
		  "                                  WHERE ${4:condition} ]) {",
		  "    $0",
		  "}"
		],
		"description": "for loop with inbuilt soql"
	  },


	  "for loop with List array init": {
		"prefix": "fsoqllist",
		"body": [
		  "List<${1:objName}>  ${2:listVariableName} = new List<${1:objName}> () ;",
		  "${2:listVariableName} = [SELECT ${3:listVariableName} ",
		  "                         FROM ${1:objName} ",
		  "                         WHERE ${4:condition} ];",
		  "for (${1:objName} ${5:variable}):${2:listVariableName} ) {",
		  "    $0",
		  "}"
		],
		"description": "for loop with List array init"
	  },
	  
	 "if condiiton": {
		"prefix": "if",
		"body": [
		  "if( ${1:condition})",
		  "{",
		  "    $0",
		  "}"
		],
		"description": "if condiiton"
	  },
	  "if else condiiton": {
		"prefix": "ife",
		"body": [
		  "if( ${1:condition})",
		  "{",
		  "    $0",
		  "}",
		  "else",
		  "{",
		  "",
		  "}"
		],
		"description": "if else condiiton"
	  },
	  "if else if else": {
		"prefix": "ifefe",
		"body": [
		  "if( ${1:condition})",
		  "{",
		  "    $0",
		  "}",
		  "else if(${2:elseCondition})",
		  "{",
		  "    ",
		  "}",
		  "else",
		  "{",
		  "    ",
		  "}"
		],
		"description": "if else if else"
	  },

	 


	"System debug for variable": {
		"prefix": "sdv",
		"body": [
		  "System.debug(\" *** variable $1\" + $1);"
		],
		"description": "System debug for variable"
	  },

	  "System debug for selection": {
		"prefix": "sds",
		"body": [
		  "System.debug(\" *** variable $TM_SELECTED_TEXT \" + $TM_SELECTED_TEXT );"
		],
		"description": "System debug for variable"
	  },


	  "for with soql": {
		"prefix": "fsoql",
		"body": [
		  "for( ${1:sobject} ${2:variable} : [SELECT ${3:fields_list} FROM ${1:sobject}])",
		  "{",
		  "",
		  "}"
		],
		"description": "for with soql"
	  },
	  "soql List Init": {
		"prefix": "soqlListInit",
		"body": [
		  "List<${1:sobject}>  ${2:ListVariable};",
		  "${2:variable} = [SELECT ${3:fields_list} FROM ${1:sobject}]",
		  "",
		  "for( ${1:sobject} ${4:variable} : ${2:ListVariable})",
		  "{",
		  "",
		  "}",
		  ""
		],
		"description": "soql List Init"
	  },
	  "invoke apex method": {
		"prefix": "callApex",
		"body": [
		  "        var ${1:actionName}= component.get(\"c.${2:apexMethodName}\"\");",
		  "        ${1:actionName}.setCallback(this, function(response) {",
		  "            var state = response.getState();",
		  "            if (state === \"SUCCESS\") {",
		  "                $0",
		  "            }            ",
		  "        });",
		  "        $A.enqueueAction(${1:actionName});     "
		],
		"description": "invoke apex method"
	  },

	  "Call Apex from Controller with params": {
		"prefix": "call_apex_full",
		"body": [
		  "        // Apex Method",
		  "        var action = cmp.get(\"c.${1:apexMethodName}\");",
		  "        action.setParams(",
		  "                    { ${2:apexParameterName}: cmp.get(\"v.${3:componentVarName}\") }",
		  "                 );",
		  "",
		  "        // set Callback",
		  "        action.setCallback(this, function(response) {",
		  "            var state = response.getState();",
		  "            if (state === \"SUCCESS\") {",
		  "                // TODO: Business Logic to be executed on Success",
		  "                 $0",
		  "            } else if (state === \"ERROR\") ",
		  "            {",
		  "               // TODO: Business Logic to be executed on Error",
		  "                var errors = response.getError();",
		  "                if (errors) ",
		  "                 {",
		  "                    if (errors[0] && errors[0].message) {",
		  "                       console.log(\"Error message: \" + errors[0].message);",
		  "                    }",
		  "                } else {",
		  "                    console.log(\"Unknown error\");",
		  "                }",
		  "            }",
		  "        });",
		  "        A.enqueueAction(action);"
		],
		"description": "Aura iteration"
	  },

	  "Aura iteration": {
		"prefix": "a_iter",
		"body": [
		  "<aura:iteration items=\"{!v.${1:listVariableName}}\" var=\"${2:var}\">",
		  "  $0",
		  "</aura:iteration>"
		],
		"description": "Aura iteration"
	  }
	  
}